// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <memory_init_0_wasm>", "[memory_init_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.0.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(1))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(6))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(7))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(8))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(9))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(10))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(11))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(17))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(18))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(19))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(20))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(21))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(22))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(23))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(25))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(26))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(27))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(28))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(29))->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_1_wasm>", "[memory_init_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.1.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(1))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(6))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(7))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(8))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(9))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(10))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(11))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(17))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(18))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(19))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(20))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(21))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(22))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(23))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(25))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(26))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(27))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(28))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(29))->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_10_wasm>", "[memory_init_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_11_wasm>", "[memory_init_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.11.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_12_wasm>", "[memory_init_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.12.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_13_wasm>", "[memory_init_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.13.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_14_wasm>", "[memory_init_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.14.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_15_wasm>", "[memory_init_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.15.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_16_wasm>", "[memory_init_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.16.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_17_wasm>", "[memory_init_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.17.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_18_wasm>", "[memory_init_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.18.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_19_wasm>", "[memory_init_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.19.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_2_wasm>", "[memory_init_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.2.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(1))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(6))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(7))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(8))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(9))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(10))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(11))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(15))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(16))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(17))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(18))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(19))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(20))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(21))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(22))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(23))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(25))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(26))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(27))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(28))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(29))->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_20_wasm>", "[memory_init_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.20.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_21_wasm>", "[memory_init_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_22_wasm>", "[memory_init_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_23_wasm>", "[memory_init_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_24_wasm>", "[memory_init_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_25_wasm>", "[memory_init_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_26_wasm>", "[memory_init_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.26.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_27_wasm>", "[memory_init_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.27.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_28_wasm>", "[memory_init_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.28.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_29_wasm>", "[memory_init_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.29.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_3_wasm>", "[memory_init_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.3.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(1))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(6))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(7))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(8))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(9))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(10))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(11))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(13))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(14))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(15))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(16))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(17))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(18))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(19))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(20))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(21))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(22))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(23))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(24))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(25))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(26))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(27))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(28))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "load8_u", UINT32_C(29))->to_ui32() == UINT32_C(0));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_30_wasm>", "[memory_init_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.30.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_31_wasm>", "[memory_init_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_32_wasm>", "[memory_init_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_33_wasm>", "[memory_init_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_34_wasm>", "[memory_init_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_35_wasm>", "[memory_init_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_36_wasm>", "[memory_init_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_37_wasm>", "[memory_init_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_38_wasm>", "[memory_init_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_39_wasm>", "[memory_init_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.39.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_4_wasm>", "[memory_init_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_40_wasm>", "[memory_init_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_41_wasm>", "[memory_init_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.41.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_42_wasm>", "[memory_init_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.42.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_43_wasm>", "[memory_init_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.43.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_44_wasm>", "[memory_init_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_45_wasm>", "[memory_init_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_46_wasm>", "[memory_init_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_47_wasm>", "[memory_init_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_48_wasm>", "[memory_init_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_49_wasm>", "[memory_init_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_5_wasm>", "[memory_init_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_50_wasm>", "[memory_init_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.50.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_51_wasm>", "[memory_init_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.51.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_52_wasm>", "[memory_init_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.52.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_53_wasm>", "[memory_init_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.53.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_54_wasm>", "[memory_init_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.54.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_55_wasm>", "[memory_init_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.55.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_56_wasm>", "[memory_init_56_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.56.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_57_wasm>", "[memory_init_57_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.57.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_58_wasm>", "[memory_init_58_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.58.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_59_wasm>", "[memory_init_59_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.59.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_6_wasm>", "[memory_init_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.6.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_60_wasm>", "[memory_init_60_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.60.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_61_wasm>", "[memory_init_61_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.61.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_62_wasm>", "[memory_init_62_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.62.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_63_wasm>", "[memory_init_63_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.63.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_64_wasm>", "[memory_init_64_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.64.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_65_wasm>", "[memory_init_65_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.65.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_66_wasm>", "[memory_init_66_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.66.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_67_wasm>", "[memory_init_67_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.67.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_68_wasm>", "[memory_init_68_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.68.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_69_wasm>", "[memory_init_69_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.69.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_7_wasm>", "[memory_init_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.7.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_70_wasm>", "[memory_init_70_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.70.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_71_wasm>", "[memory_init_71_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.71.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_72_wasm>", "[memory_init_72_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.72.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_73_wasm>", "[memory_init_73_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.73.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_74_wasm>", "[memory_init_74_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.74.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_75_wasm>", "[memory_init_75_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.75.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_76_wasm>", "[memory_init_76_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.76.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_77_wasm>", "[memory_init_77_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.77.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_78_wasm>", "[memory_init_78_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.78.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_79_wasm>", "[memory_init_79_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.79.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_8_wasm>", "[memory_init_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.8.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_80_wasm>", "[memory_init_80_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.80.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_81_wasm>", "[memory_init_81_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.81.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_82_wasm>", "[memory_init_82_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.82.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_83_wasm>", "[memory_init_83_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.83.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_84_wasm>", "[memory_init_84_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.84.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65528), UINT32_C(16)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_85_wasm>", "[memory_init_85_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.85.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65527), UINT32_C(16)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_86_wasm>", "[memory_init_86_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.86.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65472), UINT32_C(30)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_87_wasm>", "[memory_init_87_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.87.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65473), UINT32_C(31)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_88_wasm>", "[memory_init_88_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.88.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65528), UINT32_C(4294967040)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_89_wasm>", "[memory_init_89_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.89.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(0), UINT32_C(4294967292)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_9_wasm>", "[memory_init_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_init_90_wasm>", "[memory_init_90_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_init.90.wasm");
   backend_t bkend( code, &wa );

}

