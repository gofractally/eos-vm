// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <table_copy_0_wasm>", "[table_copy_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.0.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <table_copy_1_wasm>", "[table_copy_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.1.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_10_wasm>", "[table_copy_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.10.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_11_wasm>", "[table_copy_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.11.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_12_wasm>", "[table_copy_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.12.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_13_wasm>", "[table_copy_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.13.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_14_wasm>", "[table_copy_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.14.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_15_wasm>", "[table_copy_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.15.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_16_wasm>", "[table_copy_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.16.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_17_wasm>", "[table_copy_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.17.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_18_wasm>", "[table_copy_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.18.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_19_wasm>", "[table_copy_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.19.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_2_wasm>", "[table_copy_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.2.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_20_wasm>", "[table_copy_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.20.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(24), UINT32_C(0), UINT32_C(16)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(1))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(2))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(3))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(5))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(6))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(7))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_21_wasm>", "[table_copy_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.21.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(23), UINT32_C(0), UINT32_C(15)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(1))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(2))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(3))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(5))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(6))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(7))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(8))->to_ui32() == UINT32_C(8));
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_22_wasm>", "[table_copy_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.22.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(0), UINT32_C(24), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(29))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(30))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(31))->to_ui32() == UINT32_C(7));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_23_wasm>", "[table_copy_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.23.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(0), UINT32_C(23), UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(23))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(29))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(30))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(31))->to_ui32() == UINT32_C(8));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_24_wasm>", "[table_copy_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.24.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(24), UINT32_C(11), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(11))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(12))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(13))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(14))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(15))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(16))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(17))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(18))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_25_wasm>", "[table_copy_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.25.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(11), UINT32_C(24), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(29))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(30))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(31))->to_ui32() == UINT32_C(7));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_26_wasm>", "[table_copy_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.26.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(24), UINT32_C(21), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(21))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(22))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(23))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_27_wasm>", "[table_copy_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.27.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(21), UINT32_C(24), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(29))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(30))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(31))->to_ui32() == UINT32_C(7));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_28_wasm>", "[table_copy_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.28.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(21), UINT32_C(21), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(21))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(22))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(23))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(24))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(25))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(26))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(27))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(28))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(29))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(30))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(31))->to_ui32() == UINT32_C(10));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_29_wasm>", "[table_copy_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.29.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(0), UINT32_C(112), UINT32_C(4294967264)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(33)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(34)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(35)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(36)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(37)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(38)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(39)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(40)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(41)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(42)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(43)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(44)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(45)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(46)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(47)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(48)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(49)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(50)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(51)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(52)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(53)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(54)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(55)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(56)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(57)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(58)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(59)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(60)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(61)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(62)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(63)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(64)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(65)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(66)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(67)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(68)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(69)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(70)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(71)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(72)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(73)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(74)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(75)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(76)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(77)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(78)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(79)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(80)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(81)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(82)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(83)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(84)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(85)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(86)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(87)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(88)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(89)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(90)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(91)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(92)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(93)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(94)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(95)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(96)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(97)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(98)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(99)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(100)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(101)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(102)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(103)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(104)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(105)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(106)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(107)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(108)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(109)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(110)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(111)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(112))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(113))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(114))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(115))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(116))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(117))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(118))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(119))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(120))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(121))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(122))->to_ui32() == UINT32_C(10));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(123))->to_ui32() == UINT32_C(11));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(124))->to_ui32() == UINT32_C(12));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(125))->to_ui32() == UINT32_C(13));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(126))->to_ui32() == UINT32_C(14));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(127))->to_ui32() == UINT32_C(15));
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_3_wasm>", "[table_copy_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.3.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(25))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(26))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_30_wasm>", "[table_copy_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.30.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(112), UINT32_C(0), UINT32_C(4294967264)), std::exception);
   CHECK(bkend.call_with_return("env", "test", UINT32_C(0))->to_ui32() == UINT32_C(0));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(1))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(2))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(3))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(5))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(6))->to_ui32() == UINT32_C(6));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(7))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(8))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(9))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(10))->to_ui32() == UINT32_C(10));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(11))->to_ui32() == UINT32_C(11));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(12))->to_ui32() == UINT32_C(12));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(13))->to_ui32() == UINT32_C(13));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(14))->to_ui32() == UINT32_C(14));
   CHECK(bkend.call_with_return("env", "test", UINT32_C(15))->to_ui32() == UINT32_C(15));
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(33)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(34)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(35)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(36)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(37)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(38)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(39)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(40)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(41)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(42)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(43)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(44)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(45)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(46)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(47)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(48)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(49)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(50)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(51)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(52)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(53)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(54)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(55)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(56)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(57)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(58)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(59)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(60)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(61)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(62)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(63)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(64)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(65)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(66)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(67)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(68)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(69)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(70)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(71)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(72)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(73)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(74)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(75)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(76)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(77)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(78)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(79)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(80)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(81)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(82)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(83)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(84)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(85)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(86)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(87)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(88)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(89)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(90)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(91)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(92)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(93)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(94)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(95)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(96)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(97)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(98)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(99)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(100)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(101)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(102)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(103)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(104)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(105)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(106)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(107)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(108)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(109)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(110)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(111)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(112)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(113)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(114)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(115)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(116)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(117)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(118)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(119)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(120)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(121)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(122)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(123)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(124)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(125)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(126)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(127)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_4_wasm>", "[table_copy_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.4.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(15)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_5_wasm>", "[table_copy_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.5.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_6_wasm>", "[table_copy_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.6.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(26))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(27))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_7_wasm>", "[table_copy_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.7.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(10))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(11))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_8_wasm>", "[table_copy_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.8.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(13)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(17))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(18))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_copy_9_wasm>", "[table_copy_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_copy.9.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

