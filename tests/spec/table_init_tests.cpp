// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <table_init_0_wasm>", "[table_init_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.0.wasm");
   backend_t bkend( code, &wa );

}

BACKEND_TEST_CASE( "Testing wasm <table_init_1_wasm>", "[table_init_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.1.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(7))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(8))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(9))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(10))->to_ui32() == UINT32_C(8));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(6));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_10_wasm>", "[table_init_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.10.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_11_wasm>", "[table_init_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.11.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_12_wasm>", "[table_init_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.12.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_13_wasm>", "[table_init_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.13.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_14_wasm>", "[table_init_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.14.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_15_wasm>", "[table_init_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.15.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_16_wasm>", "[table_init_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.16.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_17_wasm>", "[table_init_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.17.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_18_wasm>", "[table_init_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.18.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_19_wasm>", "[table_init_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.19.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_2_wasm>", "[table_init_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.2.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(13))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(9));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(17))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_20_wasm>", "[table_init_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.20.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_21_wasm>", "[table_init_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.21.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_22_wasm>", "[table_init_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_23_wasm>", "[table_init_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_24_wasm>", "[table_init_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_25_wasm>", "[table_init_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_26_wasm>", "[table_init_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.26.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_27_wasm>", "[table_init_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.27.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_28_wasm>", "[table_init_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.28.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_29_wasm>", "[table_init_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.29.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_3_wasm>", "[table_init_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.3.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(1)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(2))->to_ui32() == UINT32_C(3));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(3))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(4))->to_ui32() == UINT32_C(4));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(5))->to_ui32() == UINT32_C(1));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(6)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(7))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(8))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(9))->to_ui32() == UINT32_C(1));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(10))->to_ui32() == UINT32_C(8));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(11)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(12))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(13)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(14))->to_ui32() == UINT32_C(7));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(15))->to_ui32() == UINT32_C(5));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(16))->to_ui32() == UINT32_C(2));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(17))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(18)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(19))->to_ui32() == UINT32_C(9));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(20)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(21))->to_ui32() == UINT32_C(7));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(22)), std::exception);
   CHECK(bkend.call_with_return("env", "check", UINT32_C(23))->to_ui32() == UINT32_C(8));
   CHECK(bkend.call_with_return("env", "check", UINT32_C(24))->to_ui32() == UINT32_C(8));
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "check", UINT32_C(29)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_30_wasm>", "[table_init_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.30.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_31_wasm>", "[table_init_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_32_wasm>", "[table_init_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_33_wasm>", "[table_init_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_34_wasm>", "[table_init_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_35_wasm>", "[table_init_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_36_wasm>", "[table_init_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_37_wasm>", "[table_init_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_38_wasm>", "[table_init_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_39_wasm>", "[table_init_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.39.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_4_wasm>", "[table_init_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.4.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_40_wasm>", "[table_init_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_41_wasm>", "[table_init_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.41.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_42_wasm>", "[table_init_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.42.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_43_wasm>", "[table_init_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.43.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_44_wasm>", "[table_init_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_45_wasm>", "[table_init_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_46_wasm>", "[table_init_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_47_wasm>", "[table_init_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_48_wasm>", "[table_init_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_49_wasm>", "[table_init_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_5_wasm>", "[table_init_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.5.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_50_wasm>", "[table_init_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.50.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_51_wasm>", "[table_init_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.51.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_52_wasm>", "[table_init_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.52.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_53_wasm>", "[table_init_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.53.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_54_wasm>", "[table_init_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.54.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_55_wasm>", "[table_init_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.55.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_56_wasm>", "[table_init_56_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.56.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_57_wasm>", "[table_init_57_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.57.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_58_wasm>", "[table_init_58_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.58.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_59_wasm>", "[table_init_59_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.59.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_6_wasm>", "[table_init_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.6.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_60_wasm>", "[table_init_60_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.60.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_61_wasm>", "[table_init_61_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.61.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_62_wasm>", "[table_init_62_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.62.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_63_wasm>", "[table_init_63_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.63.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_64_wasm>", "[table_init_64_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.64.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_65_wasm>", "[table_init_65_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.65.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_66_wasm>", "[table_init_66_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.66.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_67_wasm>", "[table_init_67_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.67.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_68_wasm>", "[table_init_68_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.68.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_69_wasm>", "[table_init_69_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.69.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_7_wasm>", "[table_init_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.7.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_70_wasm>", "[table_init_70_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.70.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_71_wasm>", "[table_init_71_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.71.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_72_wasm>", "[table_init_72_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.72.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_73_wasm>", "[table_init_73_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.73.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_74_wasm>", "[table_init_74_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.74.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_75_wasm>", "[table_init_75_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.75.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_76_wasm>", "[table_init_76_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.76.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_77_wasm>", "[table_init_77_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.77.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_78_wasm>", "[table_init_78_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.78.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_79_wasm>", "[table_init_79_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.79.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_8_wasm>", "[table_init_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.8.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <table_init_80_wasm>", "[table_init_80_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.80.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_81_wasm>", "[table_init_81_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.81.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_82_wasm>", "[table_init_82_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.82.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_83_wasm>", "[table_init_83_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.83.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_84_wasm>", "[table_init_84_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.84.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_85_wasm>", "[table_init_85_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.85.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(24), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_86_wasm>", "[table_init_86_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.86.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(25), UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_87_wasm>", "[table_init_87_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.87.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(96), UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(33)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(34)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(35)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(36)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(37)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(38)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(39)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(40)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(41)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(42)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(43)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(44)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(45)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(46)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(47)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(48)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(49)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(50)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(51)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(52)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(53)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(54)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(55)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(56)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(57)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(58)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(59)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(60)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(61)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(62)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(63)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(64)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(65)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(66)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(67)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(68)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(69)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(70)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(71)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(72)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(73)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(74)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(75)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(76)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(77)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(78)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(79)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(80)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(81)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(82)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(83)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(84)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(85)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(86)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(87)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(88)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(89)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(90)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(91)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(92)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(93)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(94)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(95)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(96)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(97)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(98)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(99)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(100)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(101)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(102)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(103)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(104)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(105)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(106)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(107)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(108)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(109)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(110)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(111)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(112)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(113)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(114)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(115)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(116)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(117)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(118)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(119)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(120)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(121)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(122)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(123)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(124)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(125)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(126)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(127)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(128)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(129)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(130)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(131)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(132)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(133)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(134)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(135)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(136)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(137)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(138)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(139)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(140)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(141)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(142)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(143)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(144)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(145)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(146)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(147)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(148)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(149)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(150)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(151)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(152)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(153)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(154)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(155)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(156)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(157)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(158)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(159)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_88_wasm>", "[table_init_88_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.88.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(97), UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(33)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(34)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(35)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(36)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(37)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(38)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(39)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(40)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(41)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(42)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(43)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(44)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(45)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(46)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(47)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(48)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(49)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(50)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(51)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(52)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(53)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(54)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(55)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(56)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(57)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(58)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(59)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(60)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(61)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(62)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(63)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(64)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(65)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(66)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(67)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(68)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(69)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(70)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(71)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(72)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(73)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(74)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(75)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(76)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(77)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(78)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(79)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(80)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(81)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(82)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(83)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(84)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(85)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(86)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(87)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(88)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(89)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(90)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(91)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(92)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(93)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(94)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(95)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(96)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(97)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(98)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(99)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(100)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(101)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(102)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(103)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(104)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(105)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(106)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(107)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(108)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(109)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(110)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(111)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(112)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(113)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(114)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(115)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(116)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(117)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(118)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(119)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(120)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(121)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(122)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(123)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(124)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(125)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(126)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(127)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(128)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(129)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(130)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(131)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(132)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(133)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(134)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(135)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(136)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(137)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(138)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(139)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(140)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(141)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(142)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(143)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(144)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(145)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(146)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(147)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(148)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(149)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(150)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(151)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(152)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(153)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(154)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(155)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(156)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(157)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(158)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(159)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_89_wasm>", "[table_init_89_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.89.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(48), UINT32_C(4294967280)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(16)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(17)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(18)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(19)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(20)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(21)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(22)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(23)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(24)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(25)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(26)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(27)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(28)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(29)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(30)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(31)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(32)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(33)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(34)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(35)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(36)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(37)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(38)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(39)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(40)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(41)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(42)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(43)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(44)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(45)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(46)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(47)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(48)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(49)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(50)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(51)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(52)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(53)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(54)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(55)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(56)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(57)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(58)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(59)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(60)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(61)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(62)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(63)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_9_wasm>", "[table_init_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.9.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_90_wasm>", "[table_init_90_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.90.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(0), UINT32_C(4294967292)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(0)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(1)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(2)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(3)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(4)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(5)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(6)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(7)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(8)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(9)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(10)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(11)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(12)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(13)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(14)), std::exception);
   CHECK_THROWS_AS(bkend("env", "test", UINT32_C(15)), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <table_init_91_wasm>", "[table_init_91_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "table_init.91.wasm");
   backend_t bkend( code, &wa );

}

