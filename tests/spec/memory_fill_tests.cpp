// Generated by spec_test_generator.  DO NOT MODIFY THIS FILE.

#include <algorithm>
#include <vector>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdlib>
#include <catch2/catch.hpp>
#include <utils.hpp>
#include <wasm_config.hpp>
#include <eosio/vm/backend.hpp>

using namespace eosio;
using namespace eosio::vm;
extern wasm_allocator wa;

BACKEND_TEST_CASE( "Testing wasm <memory_fill_0_wasm>", "[memory_fill_0_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.0.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(65280), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(65280), UINT32_C(65536), UINT32_C(85))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_1_wasm>", "[memory_fill_1_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.1.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_10_wasm>", "[memory_fill_10_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.10.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_11_wasm>", "[memory_fill_11_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.11.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_12_wasm>", "[memory_fill_12_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.12.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_13_wasm>", "[memory_fill_13_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.13.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_14_wasm>", "[memory_fill_14_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.14.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_15_wasm>", "[memory_fill_15_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.15.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_16_wasm>", "[memory_fill_16_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.16.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_17_wasm>", "[memory_fill_17_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.17.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_18_wasm>", "[memory_fill_18_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.18.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_19_wasm>", "[memory_fill_19_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.19.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_2_wasm>", "[memory_fill_2_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.2.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_20_wasm>", "[memory_fill_20_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.20.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_21_wasm>", "[memory_fill_21_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.21.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_22_wasm>", "[memory_fill_22_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.22.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_23_wasm>", "[memory_fill_23_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.23.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_24_wasm>", "[memory_fill_24_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.24.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_25_wasm>", "[memory_fill_25_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.25.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_26_wasm>", "[memory_fill_26_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.26.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_27_wasm>", "[memory_fill_27_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.27.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_28_wasm>", "[memory_fill_28_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.28.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_29_wasm>", "[memory_fill_29_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.29.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_3_wasm>", "[memory_fill_3_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.3.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(65536), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_30_wasm>", "[memory_fill_30_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.30.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_31_wasm>", "[memory_fill_31_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.31.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_32_wasm>", "[memory_fill_32_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.32.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_33_wasm>", "[memory_fill_33_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.33.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_34_wasm>", "[memory_fill_34_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.34.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_35_wasm>", "[memory_fill_35_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.35.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_36_wasm>", "[memory_fill_36_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.36.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_37_wasm>", "[memory_fill_37_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.37.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_38_wasm>", "[memory_fill_38_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.38.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_39_wasm>", "[memory_fill_39_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.39.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_4_wasm>", "[memory_fill_4_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.4.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_40_wasm>", "[memory_fill_40_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.40.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_41_wasm>", "[memory_fill_41_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.41.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_42_wasm>", "[memory_fill_42_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.42.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_43_wasm>", "[memory_fill_43_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.43.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_44_wasm>", "[memory_fill_44_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.44.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_45_wasm>", "[memory_fill_45_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.45.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_46_wasm>", "[memory_fill_46_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.46.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_47_wasm>", "[memory_fill_47_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.47.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_48_wasm>", "[memory_fill_48_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.48.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_49_wasm>", "[memory_fill_49_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.49.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_5_wasm>", "[memory_fill_5_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.5.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "test"), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_50_wasm>", "[memory_fill_50_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.50.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_51_wasm>", "[memory_fill_51_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.51.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_52_wasm>", "[memory_fill_52_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.52.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_53_wasm>", "[memory_fill_53_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.53.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_54_wasm>", "[memory_fill_54_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.54.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_55_wasm>", "[memory_fill_55_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.55.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_56_wasm>", "[memory_fill_56_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.56.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_57_wasm>", "[memory_fill_57_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.57.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_58_wasm>", "[memory_fill_58_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.58.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_59_wasm>", "[memory_fill_59_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.59.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_6_wasm>", "[memory_fill_6_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.6.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(1), UINT32_C(65535), UINT32_C(170))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(65535), UINT32_C(65536), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_60_wasm>", "[memory_fill_60_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.60.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_61_wasm>", "[memory_fill_61_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.61.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_62_wasm>", "[memory_fill_62_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.62.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_63_wasm>", "[memory_fill_63_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.63.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_64_wasm>", "[memory_fill_64_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.64.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_65_wasm>", "[memory_fill_65_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.65.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_66_wasm>", "[memory_fill_66_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.66.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_67_wasm>", "[memory_fill_67_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.67.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_68_wasm>", "[memory_fill_68_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.68.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_69_wasm>", "[memory_fill_69_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.69.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_7_wasm>", "[memory_fill_7_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.7.wasm");
   backend_t bkend( code, &wa );

bkend("env", "test");
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(18), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(18), UINT32_C(21), UINT32_C(85))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(21), UINT32_C(25), UINT32_C(170))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(25), UINT32_C(28), UINT32_C(85))->to_ui32() == UINT32_C(4294967295));
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(28), UINT32_C(65536), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_70_wasm>", "[memory_fill_70_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.70.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_71_wasm>", "[memory_fill_71_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.71.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_72_wasm>", "[memory_fill_72_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.72.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65280), UINT32_C(37), UINT32_C(512)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_73_wasm>", "[memory_fill_73_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.73.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65279), UINT32_C(37), UINT32_C(514)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_74_wasm>", "[memory_fill_74_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.74.wasm");
   backend_t bkend( code, &wa );

   CHECK_THROWS_AS(bkend("env", "run", UINT32_C(65279), UINT32_C(37), UINT32_C(4294967295)), std::exception);
   CHECK(bkend.call_with_return("env", "checkRange", UINT32_C(0), UINT32_C(1), UINT32_C(0))->to_ui32() == UINT32_C(4294967295));
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_8_wasm>", "[memory_fill_8_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.8.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

BACKEND_TEST_CASE( "Testing wasm <memory_fill_9_wasm>", "[memory_fill_9_wasm_tests]" ) {
   using backend_t = backend<standalone_function_t, TestType>;
   auto code = read_wasm( std::string(wasm_directory) + "memory_fill.9.wasm");
   CHECK_THROWS_AS(backend_t(code, nullptr), std::exception);
}

