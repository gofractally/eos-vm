(module
   (func $host.call (import "env" "host.call"))
   (func (export "empty")) ;; should succeed iff the stack limit is >= 16
   (func $i32.stack (export "i32.stack") (param i32)
      (if (local.get 0) (then
         (local.get 0)
         (i32.const -1)
         (i32.add)
         (call $i32.stack)
      ))
   )
   (func $all.stack (export "all.stack") (param i32)
      (if (local.get 0) (then
         (f32.const 0)
         (f32.const 0)
         (f32.const 0)
         (f32.const 0)

         (i64.const 0)
         (i64.const 0)
         (i64.const 0)
         (i64.const 0)

         (f64.const 0)
         (f64.const 0)
         (f64.const 0)
         (f64.const 0)
         (f64.const 0)
         (f64.const 0)
         (f64.const 0)
         (f64.const 0)

         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)
         (v128.const i64x2 0 0)

         (local.get 0)
         (i32.const -1)
         (i32.add)
         (call $all.stack)
         (return)
      ))
   )
)
